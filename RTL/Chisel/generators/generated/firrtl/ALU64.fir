FIRRTL version 3.3.0
circuit ALU64 :%[[
  {
    "class":"firrtl.transforms.DedupGroupAnnotation",
    "target":"~ALU64|MultifunctionAdderSubtractor64",
    "group":"MultifunctionAdderSubtractor64"
  },
  {
    "class":"firrtl.transforms.DedupGroupAnnotation",
    "target":"~ALU64|ALU64",
    "group":"ALU64"
  }
]]
  module MultifunctionAdderSubtractor64 : @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 55:7]
    input clock : Clock @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 55:7]
    input reset : Reset @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 55:7]
    output io : { flip a : UInt<64>, flip b : UInt<64>, flip opcode : UInt<4>, flip carryIn : UInt<1>, result : UInt<64>, carryOut : UInt<1>, overflowFlag : UInt<1>, zeroFlag : UInt<1>, negativeFlag : UInt<1>} @[src/main/scala/scabook/addersubtractors/MultiFunctionAdderSubtractor.scala 11:14]

    invalidate io.carryOut @[src/main/scala/scabook/addersubtractors/MultiFunctionAdderSubtractor.scala 27:15]
    invalidate io.overflowFlag @[src/main/scala/scabook/addersubtractors/MultiFunctionAdderSubtractor.scala 28:19]
    invalidate io.zeroFlag @[src/main/scala/scabook/addersubtractors/MultiFunctionAdderSubtractor.scala 29:15]
    invalidate io.negativeFlag @[src/main/scala/scabook/addersubtractors/MultiFunctionAdderSubtractor.scala 30:19]
    node _isSub_T = bits(io.opcode, 3, 3) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 63:24]
    node isSub = eq(_isSub_T, UInt<1>(0h1)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 63:28]
    node isSigned = bits(io.opcode, 2, 2) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 64:27]
    node operandSize = bits(io.opcode, 1, 0) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 65:30]
    node _width_T = eq(operandSize, UInt<1>(0h0)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 69:18]
    node _width_T_1 = eq(operandSize, UInt<1>(0h1)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 70:18]
    node _width_T_2 = eq(operandSize, UInt<2>(0h2)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 71:18]
    node _width_T_3 = eq(operandSize, UInt<2>(0h3)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 72:18]
    node _width_T_4 = mux(_width_T_3, UInt<7>(0h40), UInt<7>(0h40)) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _width_T_5 = mux(_width_T_2, UInt<6>(0h20), _width_T_4) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _width_T_6 = mux(_width_T_1, UInt<5>(0h10), _width_T_5) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node width = mux(_width_T, UInt<4>(0h8), _width_T_6) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _mask_T = eq(operandSize, UInt<1>(0h0)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 76:18]
    node _mask_T_1 = eq(operandSize, UInt<1>(0h1)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 77:18]
    node _mask_T_2 = eq(operandSize, UInt<2>(0h2)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 78:18]
    node _mask_T_3 = eq(operandSize, UInt<2>(0h3)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 79:18]
    node _mask_T_4 = mux(_mask_T_3, UInt<64>(0hffffffffffffffff), UInt<64>(0hffffffffffffffff)) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _mask_T_5 = mux(_mask_T_2, UInt<32>(0hffffffff), _mask_T_4) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _mask_T_6 = mux(_mask_T_1, UInt<16>(0hffff), _mask_T_5) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node mask = mux(_mask_T, UInt<8>(0hff), _mask_T_6) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node aEffective = and(io.a, mask) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 83:25]
    node bEffective = and(io.b, mask) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 84:25]
    node _bAdjusted_T = not(bEffective) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 85:31]
    node _bAdjusted_T_1 = add(_bAdjusted_T, UInt<1>(0h1)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 85:43]
    node _bAdjusted_T_2 = tail(_bAdjusted_T_1, 1) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 85:43]
    node bAdjusted = mux(isSub, _bAdjusted_T_2, bEffective) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 85:22]
    node _fullArithmeticResult_T = asSInt(aEffective) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 101:17]
    node _fullArithmeticResult_T_1 = asSInt(bAdjusted) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 101:37]
    node _fullArithmeticResult_T_2 = add(_fullArithmeticResult_T, _fullArithmeticResult_T_1) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 101:24]
    node _fullArithmeticResult_T_3 = asUInt(_fullArithmeticResult_T_2) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 101:45]
    node _fullArithmeticResult_T_4 = add(aEffective, bAdjusted) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 102:17]
    node fullArithmeticResult = mux(isSigned, _fullArithmeticResult_T_3, _fullArithmeticResult_T_4) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 100:33]
    node truncatedResult = and(fullArithmeticResult, mask) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 104:46]
    connect io.result, truncatedResult @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 114:13]
    node _isCarry_T = eq(width, UInt<4>(0h8)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 127:12]
    node _isCarry_T_1 = bits(fullArithmeticResult, 8, 8) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 127:45]
    node _isCarry_T_2 = eq(width, UInt<5>(0h10)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 128:12]
    node _isCarry_T_3 = bits(fullArithmeticResult, 16, 16) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 128:45]
    node _isCarry_T_4 = eq(width, UInt<6>(0h20)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 129:12]
    node _isCarry_T_5 = bits(fullArithmeticResult, 32, 32) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 129:45]
    node _isCarry_T_6 = eq(width, UInt<7>(0h40)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 130:12]
    node _isCarry_T_7 = bits(fullArithmeticResult, 64, 64) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 130:45]
    node _isCarry_T_8 = mux(_isCarry_T_6, _isCarry_T_7, UInt<1>(0h0)) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _isCarry_T_9 = mux(_isCarry_T_4, _isCarry_T_5, _isCarry_T_8) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _isCarry_T_10 = mux(_isCarry_T_2, _isCarry_T_3, _isCarry_T_9) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node isCarry = mux(_isCarry_T, _isCarry_T_1, _isCarry_T_10) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _isBorrow_T = eq(isSigned, UInt<1>(0h0)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 135:31]
    node _isBorrow_T_1 = and(isSub, _isBorrow_T) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 135:28]
    node _isBorrow_T_2 = lt(aEffective, bEffective) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 135:53]
    node isBorrow = mux(_isBorrow_T_1, _isBorrow_T_2, UInt<1>(0h0)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 135:21]
    node _io_carryOut_T = eq(isSigned, UInt<1>(0h0)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 141:6]
    node _io_carryOut_T_1 = eq(isSub, UInt<1>(0h0)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 141:19]
    node _io_carryOut_T_2 = and(_io_carryOut_T, _io_carryOut_T_1) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 141:16]
    node _io_carryOut_T_3 = eq(isSigned, UInt<1>(0h0)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 142:6]
    node _io_carryOut_T_4 = and(_io_carryOut_T_3, isSub) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 142:16]
    node _io_carryOut_T_5 = mux(_io_carryOut_T_4, isBorrow, UInt<1>(0h0)) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _io_carryOut_T_6 = mux(_io_carryOut_T_2, isCarry, _io_carryOut_T_5) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    connect io.carryOut, _io_carryOut_T_6 @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 140:15]
    wire aSign : UInt<1> @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 150:26]
    connect aSign, UInt<1>(0h0) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 150:26]
    wire bSign : UInt<1> @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 151:26]
    connect bSign, UInt<1>(0h0) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 151:26]
    wire sumSign : UInt<1> @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 152:28]
    connect sumSign, UInt<1>(0h0) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 152:28]
    node _aSign_T = eq(width, UInt<4>(0h8)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 155:12]
    node _aSign_T_1 = bits(aEffective, 7, 7) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 155:35]
    node _aSign_T_2 = eq(width, UInt<5>(0h10)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 156:12]
    node _aSign_T_3 = bits(aEffective, 15, 15) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 156:35]
    node _aSign_T_4 = eq(width, UInt<6>(0h20)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 157:12]
    node _aSign_T_5 = bits(aEffective, 31, 31) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 157:35]
    node _aSign_T_6 = eq(width, UInt<7>(0h40)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 158:12]
    node _aSign_T_7 = bits(aEffective, 63, 63) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 158:35]
    node _aSign_T_8 = mux(_aSign_T_6, _aSign_T_7, UInt<1>(0h0)) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _aSign_T_9 = mux(_aSign_T_4, _aSign_T_5, _aSign_T_8) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _aSign_T_10 = mux(_aSign_T_2, _aSign_T_3, _aSign_T_9) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _aSign_T_11 = mux(_aSign_T, _aSign_T_1, _aSign_T_10) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    connect aSign, _aSign_T_11 @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 154:9]
    node _bSign_T = eq(width, UInt<4>(0h8)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 162:12]
    node _bSign_T_1 = bits(bAdjusted, 7, 7) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 162:34]
    node _bSign_T_2 = eq(width, UInt<5>(0h10)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 163:12]
    node _bSign_T_3 = bits(bAdjusted, 15, 15) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 163:34]
    node _bSign_T_4 = eq(width, UInt<6>(0h20)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 164:12]
    node _bSign_T_5 = bits(bAdjusted, 31, 31) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 164:34]
    node _bSign_T_6 = eq(width, UInt<7>(0h40)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 165:12]
    node _bSign_T_7 = bits(bAdjusted, 63, 63) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 165:34]
    node _bSign_T_8 = mux(_bSign_T_6, _bSign_T_7, UInt<1>(0h0)) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _bSign_T_9 = mux(_bSign_T_4, _bSign_T_5, _bSign_T_8) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _bSign_T_10 = mux(_bSign_T_2, _bSign_T_3, _bSign_T_9) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _bSign_T_11 = mux(_bSign_T, _bSign_T_1, _bSign_T_10) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    connect bSign, _bSign_T_11 @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 161:9]
    node _sumSign_T = eq(width, UInt<4>(0h8)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 169:12]
    node _sumSign_T_1 = bits(fullArithmeticResult, 7, 7) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 169:45]
    node _sumSign_T_2 = eq(width, UInt<5>(0h10)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 170:12]
    node _sumSign_T_3 = bits(fullArithmeticResult, 15, 15) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 170:45]
    node _sumSign_T_4 = eq(width, UInt<6>(0h20)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 171:12]
    node _sumSign_T_5 = bits(fullArithmeticResult, 31, 31) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 171:45]
    node _sumSign_T_6 = eq(width, UInt<7>(0h40)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 172:12]
    node _sumSign_T_7 = bits(fullArithmeticResult, 63, 63) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 172:45]
    node _sumSign_T_8 = mux(_sumSign_T_6, _sumSign_T_7, UInt<1>(0h0)) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _sumSign_T_9 = mux(_sumSign_T_4, _sumSign_T_5, _sumSign_T_8) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _sumSign_T_10 = mux(_sumSign_T_2, _sumSign_T_3, _sumSign_T_9) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _sumSign_T_11 = mux(_sumSign_T, _sumSign_T_1, _sumSign_T_10) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    connect sumSign, _sumSign_T_11 @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 168:11]
    node _isOverflow_T = eq(aSign, bSign) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 175:27]
    node _isOverflow_T_1 = neq(aSign, sumSign) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 175:48]
    node isOverflow = and(_isOverflow_T, _isOverflow_T_1) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 175:38]
    connect io.overflowFlag, isOverflow @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 177:19]
    node _isZero_T = orr(truncatedResult) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 179:33]
    node isZero = eq(_isZero_T, UInt<1>(0h0)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 179:16]
    connect io.zeroFlag, isZero @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 181:15]
    node isNegative = mux(isSigned, sumSign, UInt<1>(0h0)) @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 183:23]
    connect io.negativeFlag, isNegative @[src/main/scala/scabook/addersubtractors/MultifunctionAdderSubtractor64.scala 184:19]

  module ALU64 : @[src/main/scala/scabook/ALUs/ALU64.scala 66:7]
    input clock : Clock @[src/main/scala/scabook/ALUs/ALU64.scala 66:7]
    input reset : UInt<1> @[src/main/scala/scabook/ALUs/ALU64.scala 66:7]
    output io : { flip a : UInt<64>, flip b : UInt<64>, result : UInt<64>, flip opcode : UInt<6>, carryOutFlag : UInt<1>, overflowFlag : UInt<1>, zeroFlag : UInt<1>, negativeFlag : UInt<1>} @[src/main/scala/scabook/ALUs/ALU64.scala 67:14]

    node _isArithmetic_T = bits(io.opcode, 5, 5) @[src/main/scala/scabook/ALUs/ALU64.scala 90:31]
    node isArithmetic = eq(_isArithmetic_T, UInt<1>(0h0)) @[src/main/scala/scabook/ALUs/ALU64.scala 90:35]
    node _isLogical_T = bits(io.opcode, 5, 5) @[src/main/scala/scabook/ALUs/ALU64.scala 91:28]
    node isLogical = eq(_isLogical_T, UInt<1>(0h1)) @[src/main/scala/scabook/ALUs/ALU64.scala 91:32]
    node _isSub_T = bits(io.opcode, 3, 3) @[src/main/scala/scabook/ALUs/ALU64.scala 92:24]
    node _isSub_T_1 = eq(_isSub_T, UInt<1>(0h1)) @[src/main/scala/scabook/ALUs/ALU64.scala 92:28]
    node isSub = and(_isSub_T_1, isArithmetic) @[src/main/scala/scabook/ALUs/ALU64.scala 92:36]
    node _isSigned_T = bits(io.opcode, 2, 2) @[src/main/scala/scabook/ALUs/ALU64.scala 93:27]
    node isSigned = and(_isSigned_T, isArithmetic) @[src/main/scala/scabook/ALUs/ALU64.scala 93:31]
    node operandSize = bits(io.opcode, 1, 0) @[src/main/scala/scabook/ALUs/ALU64.scala 94:30]
    wire width : UInt @[src/main/scala/scabook/ALUs/ALU64.scala 97:26]
    connect width, UInt<7>(0h40) @[src/main/scala/scabook/ALUs/ALU64.scala 97:26]
    wire mask : UInt<64> @[src/main/scala/scabook/ALUs/ALU64.scala 98:25]
    connect mask, UInt<64>(0hffffffffffffffff) @[src/main/scala/scabook/ALUs/ALU64.scala 98:25]
    node _T = eq(UInt<1>(0h0), operandSize) @[src/main/scala/scabook/ALUs/ALU64.scala 99:23]
    when _T : @[src/main/scala/scabook/ALUs/ALU64.scala 99:23]
      connect width, UInt<4>(0h8) @[src/main/scala/scabook/ALUs/ALU64.scala 100:25]
      connect mask, UInt<8>(0hff) @[src/main/scala/scabook/ALUs/ALU64.scala 100:39]
    else :
      node _T_1 = eq(UInt<1>(0h1), operandSize) @[src/main/scala/scabook/ALUs/ALU64.scala 99:23]
      when _T_1 : @[src/main/scala/scabook/ALUs/ALU64.scala 99:23]
        connect width, UInt<5>(0h10) @[src/main/scala/scabook/ALUs/ALU64.scala 101:25]
        connect mask, UInt<16>(0hffff) @[src/main/scala/scabook/ALUs/ALU64.scala 101:39]
      else :
        node _T_2 = eq(UInt<2>(0h2), operandSize) @[src/main/scala/scabook/ALUs/ALU64.scala 99:23]
        when _T_2 : @[src/main/scala/scabook/ALUs/ALU64.scala 99:23]
          connect width, UInt<6>(0h20) @[src/main/scala/scabook/ALUs/ALU64.scala 102:25]
          connect mask, UInt<32>(0hffffffff) @[src/main/scala/scabook/ALUs/ALU64.scala 102:39]
        else :
          node _T_3 = eq(UInt<2>(0h3), operandSize) @[src/main/scala/scabook/ALUs/ALU64.scala 99:23]
          when _T_3 : @[src/main/scala/scabook/ALUs/ALU64.scala 99:23]
            connect width, UInt<7>(0h40) @[src/main/scala/scabook/ALUs/ALU64.scala 103:25]
            connect mask, UInt<64>(0hffffffffffffffff) @[src/main/scala/scabook/ALUs/ALU64.scala 103:39]
    node aEffective = and(io.a, mask) @[src/main/scala/scabook/ALUs/ALU64.scala 107:25]
    node bEffective = and(io.b, mask) @[src/main/scala/scabook/ALUs/ALU64.scala 108:25]
    node _bAdjusted_T = not(bEffective) @[src/main/scala/scabook/ALUs/ALU64.scala 109:31]
    node _bAdjusted_T_1 = add(_bAdjusted_T, UInt<1>(0h1)) @[src/main/scala/scabook/ALUs/ALU64.scala 109:43]
    node _bAdjusted_T_2 = tail(_bAdjusted_T_1, 1) @[src/main/scala/scabook/ALUs/ALU64.scala 109:43]
    node bAdjusted = mux(isSub, _bAdjusted_T_2, bEffective) @[src/main/scala/scabook/ALUs/ALU64.scala 109:22]
    inst adderSubtractor of MultifunctionAdderSubtractor64 @[src/main/scala/scabook/ALUs/ALU64.scala 124:31]
    connect adderSubtractor.clock, clock
    connect adderSubtractor.reset, reset
    connect adderSubtractor.io.a, aEffective @[src/main/scala/scabook/ALUs/ALU64.scala 127:24]
    connect adderSubtractor.io.b, bEffective @[src/main/scala/scabook/ALUs/ALU64.scala 128:24]
    connect adderSubtractor.io.carryIn, UInt<1>(0h0) @[src/main/scala/scabook/ALUs/ALU64.scala 129:30]
    node _adderSubtractor_io_opcode_T = bits(io.opcode, 3, 0) @[src/main/scala/scabook/ALUs/ALU64.scala 130:41]
    connect adderSubtractor.io.opcode, _adderSubtractor_io_opcode_T @[src/main/scala/scabook/ALUs/ALU64.scala 130:29]
    connect io.result, adderSubtractor.io.result @[src/main/scala/scabook/ALUs/ALU64.scala 133:13]
    connect io.carryOutFlag, adderSubtractor.io.carryOut @[src/main/scala/scabook/ALUs/ALU64.scala 134:19]
    connect io.overflowFlag, adderSubtractor.io.overflowFlag @[src/main/scala/scabook/ALUs/ALU64.scala 135:19]
    connect io.zeroFlag, adderSubtractor.io.zeroFlag @[src/main/scala/scabook/ALUs/ALU64.scala 136:15]
    connect io.negativeFlag, adderSubtractor.io.negativeFlag @[src/main/scala/scabook/ALUs/ALU64.scala 137:19]
    node _logicalResult_T = bits(io.opcode, 4, 2) @[src/main/scala/scabook/ALUs/ALU64.scala 145:13]
    node _logicalResult_T_1 = eq(_logicalResult_T, UInt<1>(0h0)) @[src/main/scala/scabook/ALUs/ALU64.scala 145:20]
    node _logicalResult_T_2 = and(aEffective, bEffective) @[src/main/scala/scabook/ALUs/ALU64.scala 145:49]
    node _logicalResult_T_3 = bits(io.opcode, 4, 2) @[src/main/scala/scabook/ALUs/ALU64.scala 146:13]
    node _logicalResult_T_4 = eq(_logicalResult_T_3, UInt<1>(0h1)) @[src/main/scala/scabook/ALUs/ALU64.scala 146:20]
    node _logicalResult_T_5 = or(aEffective, bEffective) @[src/main/scala/scabook/ALUs/ALU64.scala 146:49]
    node _logicalResult_T_6 = bits(io.opcode, 4, 2) @[src/main/scala/scabook/ALUs/ALU64.scala 147:13]
    node _logicalResult_T_7 = eq(_logicalResult_T_6, UInt<2>(0h2)) @[src/main/scala/scabook/ALUs/ALU64.scala 147:20]
    node _logicalResult_T_8 = xor(aEffective, bEffective) @[src/main/scala/scabook/ALUs/ALU64.scala 147:49]
    node _logicalResult_T_9 = bits(io.opcode, 4, 2) @[src/main/scala/scabook/ALUs/ALU64.scala 148:13]
    node _logicalResult_T_10 = eq(_logicalResult_T_9, UInt<2>(0h3)) @[src/main/scala/scabook/ALUs/ALU64.scala 148:20]
    node _logicalResult_T_11 = bits(bEffective, 5, 0) @[src/main/scala/scabook/ALUs/ALU64.scala 148:64]
    node _logicalResult_T_12 = sub(width, UInt<1>(0h1)) @[src/main/scala/scabook/ALUs/ALU64.scala 148:80]
    node _logicalResult_T_13 = tail(_logicalResult_T_12, 1) @[src/main/scala/scabook/ALUs/ALU64.scala 148:80]
    node _logicalResult_T_14 = and(_logicalResult_T_11, _logicalResult_T_13) @[src/main/scala/scabook/ALUs/ALU64.scala 148:71]
    node _logicalResult_T_15 = dshl(aEffective, _logicalResult_T_14) @[src/main/scala/scabook/ALUs/ALU64.scala 148:50]
    node _logicalResult_T_16 = and(_logicalResult_T_15, mask) @[src/main/scala/scabook/ALUs/ALU64.scala 148:96]
    node _logicalResult_T_17 = bits(io.opcode, 4, 2) @[src/main/scala/scabook/ALUs/ALU64.scala 149:13]
    node _logicalResult_T_18 = eq(_logicalResult_T_17, UInt<3>(0h4)) @[src/main/scala/scabook/ALUs/ALU64.scala 149:20]
    node _logicalResult_T_19 = bits(bEffective, 5, 0) @[src/main/scala/scabook/ALUs/ALU64.scala 149:64]
    node _logicalResult_T_20 = sub(width, UInt<1>(0h1)) @[src/main/scala/scabook/ALUs/ALU64.scala 149:80]
    node _logicalResult_T_21 = tail(_logicalResult_T_20, 1) @[src/main/scala/scabook/ALUs/ALU64.scala 149:80]
    node _logicalResult_T_22 = and(_logicalResult_T_19, _logicalResult_T_21) @[src/main/scala/scabook/ALUs/ALU64.scala 149:71]
    node _logicalResult_T_23 = dshr(aEffective, _logicalResult_T_22) @[src/main/scala/scabook/ALUs/ALU64.scala 149:50]
    node _logicalResult_T_24 = and(_logicalResult_T_23, mask) @[src/main/scala/scabook/ALUs/ALU64.scala 149:96]
    node _logicalResult_T_25 = bits(io.opcode, 4, 2) @[src/main/scala/scabook/ALUs/ALU64.scala 150:13]
    node _logicalResult_T_26 = eq(_logicalResult_T_25, UInt<3>(0h5)) @[src/main/scala/scabook/ALUs/ALU64.scala 150:20]
    node _logicalResult_T_27 = asSInt(aEffective) @[src/main/scala/scabook/ALUs/ALU64.scala 150:50]
    node _logicalResult_T_28 = bits(bEffective, 5, 0) @[src/main/scala/scabook/ALUs/ALU64.scala 150:71]
    node _logicalResult_T_29 = sub(width, UInt<1>(0h1)) @[src/main/scala/scabook/ALUs/ALU64.scala 150:87]
    node _logicalResult_T_30 = tail(_logicalResult_T_29, 1) @[src/main/scala/scabook/ALUs/ALU64.scala 150:87]
    node _logicalResult_T_31 = and(_logicalResult_T_28, _logicalResult_T_30) @[src/main/scala/scabook/ALUs/ALU64.scala 150:78]
    node _logicalResult_T_32 = dshr(_logicalResult_T_27, _logicalResult_T_31) @[src/main/scala/scabook/ALUs/ALU64.scala 150:57]
    node _logicalResult_T_33 = asUInt(_logicalResult_T_32) @[src/main/scala/scabook/ALUs/ALU64.scala 150:96]
    node _logicalResult_T_34 = and(_logicalResult_T_33, mask) @[src/main/scala/scabook/ALUs/ALU64.scala 150:103]
    node _logicalResult_T_35 = mux(_logicalResult_T_26, _logicalResult_T_34, UInt<64>(0h0)) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _logicalResult_T_36 = mux(_logicalResult_T_18, _logicalResult_T_24, _logicalResult_T_35) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _logicalResult_T_37 = mux(_logicalResult_T_10, _logicalResult_T_16, _logicalResult_T_36) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _logicalResult_T_38 = mux(_logicalResult_T_7, _logicalResult_T_8, _logicalResult_T_37) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _logicalResult_T_39 = mux(_logicalResult_T_4, _logicalResult_T_5, _logicalResult_T_38) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node logicalResult = mux(_logicalResult_T_1, _logicalResult_T_2, _logicalResult_T_39) @[src/main/scala/chisel3/util/Mux.scala 126:16]
    node _io_result_T = mux(isArithmetic, adderSubtractor.io.result, logicalResult) @[src/main/scala/scabook/ALUs/ALU64.scala 158:19]
    connect io.result, _io_result_T @[src/main/scala/scabook/ALUs/ALU64.scala 158:13]
    node _io_carryOutFlag_T = mux(isArithmetic, adderSubtractor.io.carryOut, UInt<1>(0h0)) @[src/main/scala/scabook/ALUs/ALU64.scala 159:25]
    connect io.carryOutFlag, _io_carryOutFlag_T @[src/main/scala/scabook/ALUs/ALU64.scala 159:19]
    node _io_overflowFlag_T = mux(isArithmetic, adderSubtractor.io.overflowFlag, UInt<1>(0h0)) @[src/main/scala/scabook/ALUs/ALU64.scala 160:25]
    connect io.overflowFlag, _io_overflowFlag_T @[src/main/scala/scabook/ALUs/ALU64.scala 160:19]
    node _io_zeroFlag_T = mux(isArithmetic, adderSubtractor.io.zeroFlag, UInt<1>(0h0)) @[src/main/scala/scabook/ALUs/ALU64.scala 161:21]
    connect io.zeroFlag, _io_zeroFlag_T @[src/main/scala/scabook/ALUs/ALU64.scala 161:15]
    node _io_negativeFlag_T = mux(isArithmetic, adderSubtractor.io.negativeFlag, UInt<1>(0h0)) @[src/main/scala/scabook/ALUs/ALU64.scala 162:25]
    connect io.negativeFlag, _io_negativeFlag_T @[src/main/scala/scabook/ALUs/ALU64.scala 162:19]
